- name: run apt-get update
  apt: update_cache=yes

- name: Install required system packages
  apt: name={{ item }} state=installed
  with_items:
    - build-essential
    - libpq-dev
    - python-dev
    - python-setuptools
    - python-pip
    - postgresql-9.3-postgis-2.1
    - postgresql-contrib
    - git 
    - libjpeg-dev
    - nginx
    - supervisor

- name: create worker group
  user: name=worker uid=1020

- name: create app user and add to the worker group
  user: name=app uid=1010 groups="worker,sudo" password=$6$aPAfjl5w39XCz4qf$Yfjp5AHL1QwdYYiP6omTytTMhAt2YHYJ.yPmr2q5yI7U35fS0FLj2TSWtzL5ps8UiTjyVABkZeNxu5HmxHa33/

- name: Create app root directory and configure permissions
  file: path=/app state=directory owner=app group=worker  mode="g+s" recurse=yes

- name: Upgrade pip
  pip: name=pip state=latest

- name: install virtualenv
  pip: name=virtualenv

# create virtualenv if it doesn't exist
- name: create virtualenv 
  command: virtualenv /app/env creates=/app/env/bin

- name: Create data directory
  file: path=/app/data state=directory

- name: Create etc directory
  file: path=/app/etc state=directory

- name: Create files directory
  file: path=/app/files state=directory

- name: install psycopg2 in order to configure postgres databases
  pip: name=psycopg2

- name: Create postgres user
  postgresql_user: name={{ database_user }} password={{ database_password }}
  sudo: yes
  sudo_user: postgres

- name: Create postgres database
  postgresql_db: name={{ database_name }} owner={{ database_user }}
  sudo: yes
  sudo_user: postgres

- name: Add postgis extension to app db
  postgresql_ext: name=postgis db={{ database_name }}
  sudo: yes
  sudo_user: postgres

- name: Configure permissions again so they'll apply to the recently created directories
  file: path=/app owner=app group=worker  mode="g+s" recurse=yes

# Setup the neccessary production settings
- name: Install nginx web server
  apt: name=nginx state=installed

- name: Configure nginx
  copy: src=nginx.conf dest=/etc/nginx/sites-available/app

- name: Create neccessary symlink
  file: src=/etc/nginx/sites-available/app dest=/etc/nginx/sites-enabled/app state=link

- name: Delete default nginx config file.
  file: path=/etc/nginx/sites-enabled/default state=absent 


# Setup static/media directories
- name: Create Django static files directory
  file: path=/app/files/static state=directory  

- name: Create Django media files directory
  file: path=/app/files/media state=directory  


# SETUP GUNICORN
- name: Create gunicorn directories
  file: path=/app/etc/gunicorn state=directory

- name: Configure gunicorn 
  template: src=gunicorn/gunicorn.conf.j2 dest=/app/etc/gunicorn/conf.py


# SETUP SUPERVISOR
- name: Create supervisor directories
  file: path=/etc/supervisor/conf.d state=directory

- name: Create supervisor gunicorn log directores
  file: path=/var/log/supervisor/gunicorn state=directory

- name: setup gunicorn with supervisor
  template: src=supervisor/gunicorn.conf.j2 dest=/etc/supervisor/conf.d/gunicorn.conf

# Make sure directory permission are set correctly
- name: Configure permissions again so they'll apply to the recently created directories
  file: path=/app owner=app group=worker  mode="g+s" recurse=yes

# restart everything
- name: Restart nginx
  service: name=nginx state=restarted 

- name: Restart supervisor
  command: service supervisor restart

# Setup the fish shell with shortcuts
- name: Add the fish shell ppa 
  apt_repository: repo='ppa:fish-shell/release-2'

- name: Install fish
  apt: name=fish state=installed

- name: Create fish config directory
  file: path=~/.config/fish state=directory owner=app group=worker
  sudo_user: app 

- name: Create fish configuration file
  copy: src=files/fish/config.fish dest=~/.config/fish/config.fish owner=app group=worker
  sudo_user: app

- name: Set fish as the default shell
  user: name=app shell=/usr/bin/fish
  sudo: yes
